<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ops All Day</title>
    <link>http://cruatta.github.io/</link>
    <description>Recent content on Ops All Day</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Jul 2015 10:25:13 -0700</lastBuildDate>
    <atom:link href="http://cruatta.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Advanced package dependencies in Salt</title>
      <link>http://cruatta.github.io/post/advanced-dependencies-salt/</link>
      <pubDate>Sat, 18 Jul 2015 10:25:13 -0700</pubDate>
      
      <guid>http://cruatta.github.io/post/advanced-dependencies-salt/</guid>
      <description>&lt;p&gt;Linux package management systems like dpkg and rpm provide a way to declare relationships between system packages. A package gitfoo can declare git &amp;gt;= 1.0.0 as a dependency and when installed, a package manager like yum will automatically find a package to install that satisfies that dependency. Similar to how these package management systems work, declaring requisite relationships between packages can be done using SaltStack states. Simple requirements are easy to define, but can we mimic the more complicated &lt;a href=&#34;http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-advanced-packaging.html#id860373&#34;&gt;&amp;ldquo;Provides&amp;rdquo;, &amp;ldquo;Conflicts&amp;rdquo;, and &amp;ldquo;Obsoletes&amp;rdquo;&lt;/a&gt; relationships that RPMs have using just Salt states? Using gitfoo for an exemplary case, we would start by writing a state to install it and git 1.7.7. The gitfoo package will require that git is installed before it is using Salt&amp;rsquo;s &lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/requisites.html#require&#34;&gt;require&lt;/a&gt; state argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git:
  pkg.installed:
    - name: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gitfoo/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;include:
  - git

gitfoo:
  pkg.installed:
   - name: gitfoo
   - require:
     - pkg: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, what if we want to install gitlab which (we&amp;rsquo;ll pretend) requires git 2.4.5? Let’s write states for these. In CentOS 6, the git 2.4.5 package is provided by a package named git2u so we’ll install that with a new Salt state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git2u/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git2u:
  pkg.installed:
    - name: git2u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gitlab/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;include:
  - git2u

gitlab:
  pkg.installed:
    - name: gitlab
    - require:
      - pkg: git2u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happens if we want to install gitlab and gitfoo on the same server? Unfortunately, the git2u package will conflict with the git package. Applying either the gitfoo or gitlab state will fail depending on which version of git is installed first. In this situation, we really only need git2u since gitfoo just needs a version of git greater than 1.0.0. We can change our Salt states to accommodate our needs using the &lt;a href=&#34;http://docs.saltstack.com/en/latest/ref/states/requisites.html#unless&#34;&gt;unless&lt;/a&gt; state argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git:
  pkg.installed:
    - name: git
    - unless:
      - which git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this state will only try to install git 1.7.7 if the command &lt;code&gt;which git&lt;/code&gt; returns something other than &lt;code&gt;0&lt;/code&gt;. If there is a git executable already in the minion&amp;rsquo;s &lt;code&gt;$PATH&lt;/code&gt;, the unless execution will succeed and all requisite states that depend on it will continue to happily run knowing that a git executable is installed. By adding the unless argument, we&amp;rsquo;ve successfully duplicated in Salt what RPMs can do with &amp;ldquo;&lt;strong&gt;Provides&lt;/strong&gt;&amp;rdquo;. Now, we can change our git2u state to remove the older version of git safely. When git2u replaces git and provides the same capabilities as the older package, the state mimics RPM &amp;ldquo;&lt;strong&gt;Obsoletes&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git/removed.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git:
  pkg.removed:
    - name: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git2u/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;include:
  - git.removed

git2u:
  pkg.installed:
    - name: git2u
    - require:
      - pkg: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any state requires some version of git, we can safely include the git state and not worry about git2u being removed.&lt;/p&gt;

&lt;p&gt;What if we want to ensure that only one of our git versions is ever installed in a single state run? We can do this by changing the ID of our git2u &lt;code&gt;pkg.installed&lt;/code&gt; state to &lt;code&gt;git&lt;/code&gt;. Changing the ID of the git &lt;code&gt;pkg.removed&lt;/code&gt; state to &lt;code&gt;git17&lt;/code&gt; is required because we want to be able to include this in the git2u state without the IDs conflicting.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git/removed.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git17:
  pkg.removed:
    - name: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git2u/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;include:
  - git.removed

git:
  pkg.installed:
    - name: git2u
    - require:
      - pkg: git17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to create a state to remove git2u and include that state in the git state. We&amp;rsquo;re also going to remove the unless argument as well so Salt will always try to install the git package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git2u/removed.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;git2u:
  pkg.removed:
    - name: git2u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git/init.sls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;include:
  - git2u.removed

git:
  pkg.installed:
    - name: git
    - require:
      - pkg: git2u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we try to apply both the git2u and git states in the same state run, Salt will let us know there&amp;rsquo;s an issue with conflicting SLS IDs and won&amp;rsquo;t continue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost salt]# cat top.sls
base:
  &#39;*&#39;:
    - git
    - git2u
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost salt]# salt-call state.highstate -l warning
local:
    Data failed to compile:
----------
    Detected conflicting IDs, SLS IDs need to be globally unique.
    The conflicting ID is &#39;git&#39; and is found in SLS &#39;base:git&#39; and SLS &#39;base:git2u&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is this the case? The &lt;code&gt;pkg.installed&lt;/code&gt; states for both git2u and git have the same SLS IDs (git) which causes a conflict in the Salt state tree. This ensures that during a state run only one of these states can be executed. With this property, our states have the &amp;ldquo;&lt;strong&gt;Conflicts&lt;/strong&gt;&amp;rdquo; relationship that many package managers provide.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>